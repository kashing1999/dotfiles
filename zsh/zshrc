# Enable colors and change prompt:
autoload -U colors && colors
PS1="%B%{$fg[red]%}[%{$fg[white]%}%n%{$fg[white]%}@%{$fg[white]%}%M %{$fg[cyan]%}%1~%{$fg[red]%}]%{$reset_color%}$%b "

# History
HISTFILE=~/.zsh_history
HISTSIZE=1000000
SAVEHIST=1000000
setopt appendhistory

# Case insensitive tab completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
# setopt MENU_COMPLETE

# Editor
EDITOR="/usr/bin/nvim"

# Basic auto/tab complete:
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots)		# Include hidden files.

#Use home and end to navigate terminal
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line

bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

# vi mode
bindkey -v
export KEYTIMEOUT=1
# Reverse searching
bindkey '^R' history-incremental-pattern-search-backward

ctrl-w-backward-delete-word() {
    local WORDCHARS=${WORDCHARS/\//}
    zle backward-delete-word
}

zle -N ctrl-w-backward-delete-word
bindkey '^W' ctrl-w-backward-delete-word

# Reverse menu complete
bindkey '^[[Z' reverse-menu-complete

# Change cursor shape for different vi modes.
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

# Edit line in vim with ctrl-e:
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line

# Repeat last command with alt-<dot>
bindkey '\e.' insert-last-word

# Aliases
alias ls="ls -h --color"
alias l="ls"
alias ll="ls -lh"
alias la="ls -lah"
alias ltr="ls -lahtr"
alias vim="nvim"
alias less="less -r -i"
# alias yay="yay --aur"
# alias conda-start="export PATH=/home/ks/.local/anaconda3/bin:$PATH"
# alias conda-start="source ~/.local/bin/conda-init"
# alias conda-start="source /opt/anaconda3/bin/activate"
alias xclip="xclip -selection c"
alias binja="binaryninja"
alias du-sort="du -h -d 1 | sort -h"

# Ranger quit in current directory
alias ranger='ranger --choosedir=$HOME/.cache/rangerdir; LASTDIR=`cat $HOME/.cache/rangerdir`; cd "$LASTDIR"'
alias r='ranger'
alias fp="yay -Slq | fzf -m --preview 'yay -Si {1}' | yay -S -"
alias dp="yay -Slq | fzf -m --preview 'yay -Si {1}' | yay --getpkgbuild -"

# Load version control information
autoload -Uz vcs_info
precmd() { vcs_info }

# git branch
setopt PROMPT_SUBST
RPROMPT=\$vcs_info_msg_0_

# Format the vcs_info_msg_0_ variable
zstyle ':vcs_info:git:*' formats '%b'

autoload -Uz compinit
compinit

extract ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via extract" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Load zsh-syntax-highlighting; should be last.
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
